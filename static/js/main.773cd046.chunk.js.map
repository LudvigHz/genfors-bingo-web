{"version":3,"sources":["bingo.txt","components/BingoCell/index.js","github.svg","components/BingoCell/backgroundt.png","App.js","serviceWorker.js","index.js"],"names":["BingoCell","Component","handleClick","this","props","handleCellChange","id","render","className","clicked","onClick","content","App","constructor","super","state","text","chosen_cells","bingo_id","bingo_rows","bingo_cols","bingo_diagonal_down","bingo_diagonal_up","is_bingo","value","cells","Math","floor","i","colBingo","j","console","log","diagBingoDown","diagBingoUp","rowBingo","newState","setState","localStorage","setItem","JSON","stringify","generateBoard","rawFile","XMLHttpRequest","open","require","onreadystatechange","readyState","status","bingoArray","responseText","split","picks","generatePicks","length","pickedText","filter","item","key","indexOf","matrix","initState","send","bind","componentDidMount","getItem","parse","document","title","componentDidUpdate","numberOfLines","k","random","role","aria-label","href","src","logo","style","maxHeight","maxWidth","alt","fireImg","map","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.773cd046.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bingo.01c17a52.txt\";","import React, { Component } from \"react\";\nimport \"./BingoCell.css\";\n\nclass BingoCell extends Component {\n  handleClick = () => {\n    this.props.handleCellChange(this.props.id);\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.clicked ? \"cell cell-selected\" : \"cell\"}\n        onClick={this.handleClick}\n      >\n        <p>{this.props.content}</p>\n      </div>\n    );\n  }\n}\n\nexport default BingoCell;\n","export default __webpack_public_path__ + \"static/media/github.1dd51261.svg\";","export default __webpack_public_path__ + \"static/media/backgroundt.24a5258a.png\";","import React, { Component } from \"react\";\nimport BingoCell from \"./components/BingoCell\";\nimport \"./App.css\";\nimport logo from \"./github.svg\";\nimport fireImg from \"./components/BingoCell/backgroundt.png\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCellChange = this.handleCellChange.bind(this);\n  }\n\n  state = {\n    text: [],\n    chosen_cells: [],\n    bingo_id: 0,\n    bingo_rows: [],\n    bingo_cols: [],\n    bingo_diagonal_down: false,\n    bingo_diagonal_up: false,\n    is_bingo: false,\n  };\n\n  componentDidMount() {\n    if (!!localStorage.getItem(\"bingoState\")) {\n      this.setState(JSON.parse(localStorage.getItem(\"bingoState\")));\n    } else {\n      this.generateBoard();\n    }\n    document.title = \"Genforsbingo\";\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\"bingoState\", JSON.stringify(this.state));\n  }\n\n  handleCellChange = (value) => {\n    let cells = this.state.chosen_cells;\n    cells[value % 4][Math.floor(value / 4)] = !cells[value % 4][\n      Math.floor(value / 4)\n    ];\n    let bingo_rows = this.state.bingo_rows;\n    let bingo_cols = this.state.bingo_cols;\n    let bingo_diagonal_down = this.state.bingo_diagonal_down;\n    let bingo_diagonal_up = this.state.bingo_diagonal_up;\n    let is_bingo = false;\n\n    for (let i = 0; i < 4; i++) {\n      if (!this.state.bingo_cols[i]) {\n        let colBingo = true;\n        for (let j = 0; j < 4; j++) {\n          if (!cells[i][j]) {\n            colBingo = false;\n          }\n        }\n        if (colBingo) {\n          console.log(\"col bingo!\");\n          bingo_cols[i] = true;\n          console.log(bingo_cols);\n          is_bingo = true;\n        }\n      }\n    }\n    if (!bingo_diagonal_down) {\n      let diagBingoDown = true;\n      for (let i = 0; i < 4; i++) {\n        if (!cells[i][i]) {\n          diagBingoDown = false;\n        }\n      }\n      if (diagBingoDown) {\n        console.log(\"diagonal bingo!\");\n        bingo_diagonal_down = true;\n        is_bingo = true;\n      }\n    }\n    if (!bingo_diagonal_up) {\n      let diagBingoUp = true;\n      for (let i = 0; i < 4; i++) {\n        if (!cells[3 - i][i]) {\n          diagBingoUp = false;\n        }\n      }\n      if (diagBingoUp) {\n        console.log(\"diagonal bingo!\");\n        bingo_diagonal_up = true;\n        is_bingo = true;\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      if (!this.state.bingo_rows[i]) {\n        let rowBingo = true;\n        for (let j = 0; j < 4; j++) {\n          if (!cells[j][i]) {\n            rowBingo = false;\n          }\n        }\n        if (rowBingo) {\n          console.log(\"row bingo!\");\n          bingo_rows[i] = true;\n          console.log(bingo_rows);\n          is_bingo = true;\n        }\n      }\n    }\n    const newState = {\n      text: this.state.text,\n      chosen_cells: cells,\n      bingo_rows: bingo_rows,\n      bingo_cols: bingo_cols,\n      bingo_diagonal_down: bingo_diagonal_down,\n      bingo_diagonal_up: bingo_diagonal_up,\n      is_bingo: is_bingo,\n      bingo_id: this.state.bingo_id,\n    };\n    this.setState(newState);\n    localStorage.setItem(\"bingoState\", JSON.stringify(newState));\n  };\n\n  static generatePicks(numberOfLines) {\n    let picks = [];\n    for (let i = 0; i < 16; i++) {\n      let k = Math.floor(Math.random() * numberOfLines);\n\n      while (picks.indexOf(k) > -1) {\n        k = Math.floor(Math.random() * numberOfLines);\n      }\n      picks[i] = k;\n    }\n    return picks;\n  }\n\n  generateBoard = () => {\n    let rawFile = new XMLHttpRequest();\n    rawFile.open(\"GET\", require(\"./bingo.txt\"), false);\n    rawFile.onreadystatechange = () => {\n      if (rawFile.readyState === 4) {\n        if (rawFile.status === 200 || rawFile.status === 0) {\n          let allText = rawFile.responseText;\n          let bingoArray = allText.split(\"\\n\");\n          let picks = App.generatePicks(bingoArray.length);\n          let pickedText = bingoArray.filter((item, key) => {\n            return picks.indexOf(key) > -1;\n          });\n          let matrix = [];\n          for (let i = 0; i < 4; i++) {\n            matrix[i] = [];\n            for (let j = 0; j < 4; j++) {\n              matrix[i][j] = false;\n            }\n          }\n          const initState = {\n            text: pickedText,\n            bingo_id: this.state.bingo_id + 16,\n            chosen_cells: matrix,\n            bingo_rows: [],\n            bingo_cols: [],\n            bingo_diagonal_down: false,\n            bingo_diagonal_up: false,\n          };\n          localStorage.setItem(\"bingoState\", JSON.stringify(initState));\n          this.setState(initState);\n        }\n      }\n    };\n    rawFile.send(null);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div\n          className={this.state.is_bingo ? \"popup show\" : \"popup\"}\n          onClick={() => this.setState({ is_bingo: false })}\n        >\n          <div className=\"bingotext\">\n            <span role=\"img\" aria-label=\"flame\">\n              🔥\n            </span>\n            <span>Bingo!</span>\n            <span role=\"img\" aria-label=\"flame\">\n              🔥\n            </span>\n            <p>(Trykk for å lukke)</p>\n          </div>\n        </div>\n\n        <div className=\"github\">\n          <a href={\"https://github.com/magnhan/genfors-bingo-web\"}>\n            <img\n              src={logo}\n              style={{ maxHeight: 50, maxWidth: \"6vw\" }}\n              alt=\"Github\"\n            />\n            <br />\n            <div>Regler</div>\n          </a>\n        </div>\n        <div className=\"App-header\">\n          <span className=\"logo\">\n            <img\n              src={fireImg}\n              style={{ maxHeight: 30, maxWidth: \"6vw\" }}\n              alt=\"🔥\"\n            />\n            <span> Genforsbingo</span>\n          </span>\n          <div className=\"newBoard\">\n            <button onClick={() => this.generateBoard()}>Nytt brett!</button>\n          </div>\n        </div>\n        <div className=\"bingoBoard\">\n          {this.state.text.map((item, key = 0) => {\n            key++;\n            return (\n              <BingoCell\n                key={this.state.bingo_id + key}\n                id={key - 1}\n                content={item}\n                clicked={\n                  this.state.chosen_cells[(key - 1) % 4][\n                    Math.floor((key - 1) / 4)\n                  ]\n                }\n                handleCellChange={this.handleCellChange}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}